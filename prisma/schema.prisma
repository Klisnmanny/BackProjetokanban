// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Modelo para a entidade Usuario
model Usuario {
  id_usuario String       @id @default(uuid()) @map("id_usuario") // Identificador único do usuário, tipo String com UUID padrão, mapeado para a coluna "id_usuario" no banco de dados
  nome       String       @unique                                // Nome do usuário, deve ser único
  senha      String                                            // Senha do usuário
  projetos   Projeto[]    @relation("Proprietario")             // Relacionamento original com Projetos
  participacoes Participacao[] // Relacionamento com a nova tabela de Participacao
  @@map("usuarios")                                        // Mapeia o nome da tabela para "usuarios" no banco de dados
}

// Modelo para a entidade Projeto
model Projeto {
  id_projeto  String         @id @default(uuid()) @map("id_projeto") // Identificador único do projeto, tipo String com UUID padrão, mapeado para a coluna "id_projeto" no banco de dados
  titulo      String                                      // Título do projeto
  descricao   String?                                     // Descrição do projeto (opcional)
  dataCriacao DateTime       @default(now()) @map("data_criacao") // Data de criação do projeto, padrão para o momento atual, mapeado para a coluna "data_criacao"
  background  String?                                     // Imagem ou cor de fundo do projeto (opcional)
  usuarioId   String         @map("usuario_id")                   // ID do usuário relacionado ao projeto, mapeado para a coluna "usuario_id"
  usuario     Usuario       @relation("Proprietario", fields: [usuarioId], references: [id_usuario]) // Relacionamento com o modelo Usuario
  estagios    Estagio[]                                   // Relacionamento de um para muitos com o modelo Estagio
  participacoes Participacao[] // Relacionamento com a nova tabela de Participacao
  @@map("projetos")                                       // Mapeia o nome da tabela para "projetos" no banco de dados
}

// Modelo para a entidade Participacao
model Participacao {
  id          String   @id @default(uuid()) @map("id_participacao") // Identificador único da participação
  usuarioId   String   @map("usuario_id")                           // ID do usuário
  projetoId   String   @map("projeto_id")                           // ID do projeto
  usuario     Usuario @relation(fields: [usuarioId], references: [id_usuario]) // Relacionamento com o modelo Usuario
  projeto     Projeto @relation(fields: [projetoId], references: [id_projeto]) // Relacionamento com o modelo Projeto

  @@unique([usuarioId, projetoId]) // Garante que um usuário não possa ser adicionado ao mesmo projeto mais de uma vez
  @@map("participacoes") // Mapeia o nome da tabela para "participacoes" no banco de dados
}

// Modelo para a entidade Estagio
model Estagio {
  id_estagio String   @id @default(uuid()) @map("id_estagio") // Identificador único do estágio, tipo String com UUID padrão, mapeado para a coluna "id_estagio" no banco de dados
  nome       String                                      // Nome do estágio
  projetoId  String   @map("projeto_id")                   // ID do projeto relacionado ao estágio, mapeado para a coluna "projeto_id"
  projeto    Projeto  @relation(fields: [projetoId], references: [id_projeto]) // Relacionamento com o modelo Projeto
  cards      Card[]                                      // Relacionamento de um para muitos com o modelo Card
  @@map("estagios")                                      // Mapeia o nome da tabela para "estagios" no banco de dados
}

// Modelo para a entidade Card
model Card {
  id_card    String   @id @default(uuid()) @map("id_card") // Identificador único do card, tipo String com UUID padrão, mapeado para a coluna "id_card" no banco de dados
  titulo     String                                      // Título do card
  descricao  String?                                     // Descrição do card (opcional)
  dataCriacao DateTime @default(now()) @map("data_criacao") // Data de criação do card, padrão para o momento atual, mapeado para a coluna "data_criacao"
  dataEntrega DateTime? @map("data_entrega")              // Data de entrega do card (opcional), mapeado para a coluna "data_entrega"
  estagioId  String   @map("estagio_id")                   // ID do estágio relacionado ao card, mapeado para a coluna "estagio_id"
  estagio    Estagio  @relation(fields: [estagioId], references: [id_estagio]) // Relacionamento com o modelo Estagio
  @@map("cards")                                         // Mapeia o nome da tabela para "cards" no banco de dados
}
